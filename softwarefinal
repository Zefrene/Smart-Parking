// ---------- Library Includes ----------
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// ---------- Configuration ----------
#define WIFI_SSID "Arduino"
#define WIFI_PASSWORD "arduinouno"
const char* mqttServer = "thingsboard.cloud";
const int mqttPort = 1883;
const char* token = "SGFN7uIb6klnaFoGXk3L";
#define LCD_ADDRESS 0x27
#define LCD_COLS 16
#define LCD_ROWS 2
#define MAX_SLOTS 10
#define SMOKE_THRESHOLD 2000
#define DEBOUNCE_DELAY 500
#define IR_DETECTED LOW

// ---------- Pin Definitions ----------
#define IR_SENSOR_A_IN 13
#define IR_SENSOR_A_OUT 12
#define IR_SENSOR_B_IN 14
#define IR_SENSOR_B_OUT 27
#define MQ2_SENSOR 34
#define BUZZER_PIN 26

// ---------- Global Objects ----------
WiFiClient espClient; 
PubSubClient client(espClient); LiquidCrystal_I2C lcd(LCD_ADDRESS, LCD_COLS, LCD_ROWS);

// ---------- Global Variables ----------
int region_A = MAX_SLOTS, region_B = MAX_SLOTS, smokeValue = 0;
bool lastAIn = HIGH, lastAOut = HIGH, lastBIn = HIGH, lastBOut = HIGH;
unsigned long lastLcdUpdateTime = 0, lastDetectTimeA_In = 0, lastDetectTimeA_Out = 0;
unsigned long lastDetectTimeB_In = 0, lastDetectTimeB_Out = 0;

// --- Hazard Detection Variables ---
bool smokeAlarmActive = false, blinkState = false;
unsigned long lastBlinkTime = 0, lastBeepTime = 0;
unsigned long lastTelemetryTime = 0; // <<< NEW

void setup() {
  Serial.begin(115200);
  pinMode(IR_SENSOR_A_IN, INPUT); pinMode(IR_SENSOR_A_OUT, INPUT);
  pinMode(IR_SENSOR_B_IN, INPUT); pinMode(IR_SENSOR_B_OUT, INPUT);
  pinMode(BUZZER_PIN, OUTPUT); digitalWrite(BUZZER_PIN, HIGH);
  lcd.init(); lcd.backlight();
  lcd.setCursor(0, 0); lcd.print("Parking System"); lcd.setCursor(0, 1); lcd.print("Connecting...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); client.setServer(mqttServer, mqttPort);
}

void loop() {
  checkConnections();
  if (client.connected()) client.loop();
  
  bool stateChanged = checkAllSensors();

  if (smokeAlarmActive) {
    handleAlarmEffects();
  } else {
    digitalWrite(BUZZER_PIN, HIGH);
    updateLCD();
  }
  
  // --- NEW, IMPROVED TELEMETRY LOGIC ---
  if (stateChanged || (smokeAlarmActive && (millis() - lastTelemetryTime > 5000))) {
    sendTelemetry();
  }
}

void handleAlarmEffects() {
  if (millis() - lastBlinkTime > 500) {
    blinkState = !blinkState; lastBlinkTime = millis();
    lcd.clear();
    if (blinkState) {
      lcd.setCursor(0, 0); lcd.print("!!SMOKE ALERT!!");
      lcd.setCursor(0, 1); lcd.print("  EVACUATE NOW  ");
    }
  }
  if (millis() - lastBeepTime > 300) {
    digitalWrite(BUZZER_PIN, !digitalRead(BUZZER_PIN));
    lastBeepTime = millis();
  }
}

void updateLCD() {
  if (millis() - lastLcdUpdateTime > 1000) {
    lcd.clear();
    lcd.setCursor(0, 0);
    if (region_A == 0) lcd.print("Zone A: FULL");
    else { lcd.print("Zone A: "); lcd.print(region_A); lcd.print(" Left"); }
    lcd.setCursor(0, 1);
    if (region_B == 0) lcd.print("Zone B: FULL");
    else { lcd.print("Zone B: "); lcd.print(region_B); lcd.print(" Left"); }
    lastLcdUpdateTime = millis();
  }
}

bool checkAllSensors() {
  bool updateNeeded = false;
  unsigned long currentTime = millis();
  bool currentAIn=digitalRead(IR_SENSOR_A_IN), currentAOut=digitalRead(IR_SENSOR_A_OUT);
  bool currentBIn=digitalRead(IR_SENSOR_B_IN), currentBOut=digitalRead(IR_SENSOR_B_OUT);
  smokeValue = analogRead(MQ2_SENSOR);

  if ((currentAIn == IR_DETECTED) && (lastAIn != IR_DETECTED) && (currentTime-lastDetectTimeA_In > DEBOUNCE_DELAY)) {
    if (region_A > 0) { region_A--; updateNeeded = true; Serial.println("ðŸš— In A"); }
    lastDetectTimeA_In = currentTime;
  }
  if ((currentAOut == IR_DETECTED) && (lastAOut != IR_DETECTED) && (currentTime-lastDetectTimeA_Out > DEBOUNCE_DELAY)) {
    if (region_A < MAX_SLOTS) { region_A++; updateNeeded = true; Serial.println("ðŸš™ Out A"); }
    lastDetectTimeA_Out = currentTime;
  }
  if ((currentBIn == IR_DETECTED) && (lastBIn != IR_DETECTED) && (currentTime-lastDetectTimeB_In > DEBOUNCE_DELAY)) {
    if (region_B > 0) { region_B--; updateNeeded = true; Serial.println("ðŸš— In B"); }
    lastDetectTimeB_In = currentTime;
  }
  if ((currentBOut == IR_DETECTED) && (lastBOut != IR_DETECTED) && (currentTime-lastDetectTimeB_Out > DEBOUNCE_DELAY)) {
    if (region_B < MAX_SLOTS) { region_B++; updateNeeded = true; Serial.println("ðŸš™ Out B"); }
    lastDetectTimeB_Out = currentTime;
  }

  if (smokeValue > SMOKE_THRESHOLD) {
    if (!smokeAlarmActive) {
      Serial.println("ðŸ”¥ Smoke Detected! ALARM ACTIVATED.");
      updateNeeded = true;
    }
    smokeAlarmActive = true;
  } else {
    if (smokeAlarmActive) {
      Serial.println("Smoke has cleared. ALARM DEACTIVATED.");
      updateNeeded = true;
    }
    smokeAlarmActive = false;
  }
  
  lastAIn = currentAIn; lastAOut = currentAOut; lastBIn = currentBIn; lastBOut = currentBOut;
  return updateNeeded;
}

void checkConnections() {
  if (WiFi.status() != WL_CONNECTED) return;
  if (!client.connected()) {
    if (client.connect("ESP32Client", token, NULL)) Serial.println("MQTT connected");
    else Serial.print("MQTT failed");
  }
}

void sendTelemetry() {
  if (!client.connected()) return;
  String payload = "{";
  payload += "\"region_A\":" + String(region_A) + ",";
  payload += "\"region_B\":" + String(region_B) + ",";
  payload += "\"smoke_value\":" + String(smokeValue) + ",";
  payload += "\"alarm\":" + String(smokeAlarmActive ? "true" : "false");
  payload += "}";
  Serial.println("Sending: " + payload);
  client.publish("v1/devices/me/telemetry", (char*) payload.c_str());
  
  lastTelemetryTime = millis(); // <<< RESET THE TIMER
}
