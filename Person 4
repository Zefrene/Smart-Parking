
#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "esp_camera.h"
#include <time.h>

const char* ssid = "Galaxy A34";         // Replace "xxx" with your WiFi SSID
const char* password = "*********";      // Replace "xxx" with your WiFi Password
String serverName = "www.circuitdigest.cloud";  // Replace with your server domain
String serverPath = "/readnumberplate";              // API endpoint path "/readqrcode" "/readnumberplate"
const int serverPort = 443;                     // HTTPS port
String apiKey = "8mwAhgSpSBhN";             // Replace "xxx" with your API key

#define triggerButton 13  // GPIO pin for the trigger button
#define flashLight 4      // GPIO pin for the flashlight
int count = 0;           // Counter for image uploads
WiFiClientSecure client; // Secure client for HTTPS communication

// Camera GPIO pins - adjust based on your ESP32-CAM board
#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27
#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22

// Function to extract a JSON string value by key
String extractJsonStringValue(const String& jsonString, const String& key) {
  int keyIndex = jsonString.indexOf(key);
  if (keyIndex == -1) {
    return "";
  }
  int startIndex = jsonString.indexOf(':', keyIndex) + 2;
  int endIndex = jsonString.indexOf('"', startIndex);
  if (startIndex == -1 || endIndex == -1) {
    return "";
  }
  return jsonString.substring(startIndex, endIndex);
}

//NTP Setup
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 8 * 3600;  // Malaysia Time (GMT+8)
const int   daylightOffset_sec = 0;

void uploadPlateToFirebase(String plateNumber) {
  if (plateNumber == "") {
    Serial.println("Empty plate number, skipping Firebase upload.");
    return;
  }

  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to get local time for Firebase write.");
    return;
  }

  char dateStr[11];  // YYYY-MM-DD
  strftime(dateStr, sizeof(dateStr), "%Y-%m-%d", &timeinfo);

  int hour = timeinfo.tm_hour;
  String timeSlot = String(hour % 12 == 0 ? 12 : hour % 12) + (hour < 12 ? "AM-" : "PM-");
  int nextHour = (hour + 1) % 24;
  timeSlot += String(nextHour % 12 == 0 ? 12 : nextHour % 12) + (nextHour < 12 ? "AM" : "PM");

  String firebaseHost = "iot-smart-parking-45de5-default-rtdb.firebaseio.com"; // 🔁 Replace with your actual Firebase project URL
  String firebasePath = "/Parking/ReservedRegion/PlateDetected/" + String(dateStr) + "/" + timeSlot + "/CarPlates.json";
  String firebaseUrl = "https://" + firebaseHost + firebasePath;

  // Construct JSON array element
  String jsonPayload = "\"" + plateNumber + "\"";

  // Append mode (GET -> get array -> push -> PUT new array)
  WiFiClientSecure firebaseClient;
  firebaseClient.setInsecure();

  Serial.println("Fetching existing CarPlates array...");

  // Step 1: Read current array
  String getRequest = String("GET ") + firebasePath + "?print=pretty HTTP/1.1\r\n" +
                      "Host: " + firebaseHost + "\r\n" +
                      "Connection: close\r\n\r\n";
  firebaseClient.print(getRequest);

  String response = "";
  while (firebaseClient.connected()) {
    while (firebaseClient.available()) {
      char c = firebaseClient.read();
      response += c;
    }
  }
  firebaseClient.stop();

  // Parse existing array length (very simple parsing)
  int index = 0;
  while (response.indexOf("\"" + String(index) + "\"") != -1) {
    index++;
  }

  // Step 2: PUT new plate to next index
  String putPath = "/Parking/ReservedRegion/PlateDetected/" + String(dateStr) + "/" + timeSlot + "/CarPlates/" + String(index) + ".json";
  String putUrl = "https://" + firebaseHost + putPath;

  Serial.println("Uploading Plate Number to Firebase: " + plateNumber);

  if (firebaseClient.connect(firebaseHost.c_str(), 443)) {
    String request = String("PUT ") + putPath + " HTTP/1.1\r\n" +
                     "Host: " + firebaseHost + "\r\n" +
                     "Content-Type: application/json\r\n" +
                     "Content-Length: " + String(jsonPayload.length()) + "\r\n\r\n" +
                     jsonPayload;

    firebaseClient.print(request);

    String resp = "";
    long timeout = millis();
    while (firebaseClient.connected() && millis() - timeout < 5000) {
      while (firebaseClient.available()) {
        char c = firebaseClient.read();
        resp += c;
      }
    }
    Serial.println("Firebase response:");
    Serial.println(resp);
    firebaseClient.stop();
  } else {
    Serial.println("Firebase connection failed.");
  }
}

void setup() {
  // Disable brownout detector
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  Serial.begin(115200);
  pinMode(flashLight, OUTPUT);
  pinMode(triggerButton, INPUT);
  digitalWrite(flashLight, LOW);
  // Connect to WiFi
  WiFi.mode(WIFI_STA);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("ESP32-CAM IP Address: ");
  Serial.println(WiFi.localIP());
  
  //NTP Setup
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.println("Waiting for NTP time sync...");
  struct tm timeinfo;
  while (!getLocalTime(&timeinfo)) {
  Serial.println("Failed to obtain time");
  delay(1000);
  }
  Serial.println("Time obtained");

  // Configure camera
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  // Adjust frame size and quality based on PSRAM availability
  if (psramFound()) {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 5;  // Lower number means higher quality (0-63)
    config.fb_count = 2;
    Serial.println("PSRAM found");
  } else {
    config.frame_size = FRAMESIZE_CIF;
    config.jpeg_quality = 12;  // Lower number means higher quality (0-63)
    config.fb_count = 1;
  }
  // Initialize camera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    delay(1000);
    ESP.restart();
  }
}
void loop() {
  // Check if trigger button is pressed
      digitalWrite(triggerButton, HIGH);
  if (digitalRead(triggerButton) == HIGH) {
    int status = sendPhoto();
    if (status == -1) {
      Serial.println("Image Capture Failed");
    } else if (status == -2) {
      Serial.println("Server Connection Failed");
    }
  }
  delay(5000);
}
// Function to capture and send photo to the server
int sendPhoto() {
  camera_fb_t* fb = NULL;
  // Turn on flash light and capture image
  // digitalWrite(flashLight, HIGH);
  delay(100);
  fb = esp_camera_fb_get();
  delay(100);
  if (!fb) {
    Serial.println("Camera capture failed");
    return -1;
  }
  // Display success message
  Serial.println("Image Capture Success");
  delay(300);
  // digitalWrite(flashLight, LOW);
  // Connect to server
  Serial.println("Connecting to server:" + serverName);
  client.setInsecure();  // Skip certificate validation for simplicity
  if (client.connect(serverName.c_str(), serverPort)) {
    Serial.println("Connection successful!");
    delay(300);
    Serial.println("Data Uploading !");
    // Increment count and prepare file name
    count++;
    Serial.println(count);
    String filename = apiKey + ".jpeg";
    // Prepare HTTP POST request
    String head = "--CircuitDigest\r\nContent-Disposition: form-data; name=\"imageFile\"; filename=\"" + filename + "\"\r\nContent-Type: image/jpeg\r\n\r\n";
    String tail = "\r\n--CircuitDigest--\r\n";
    uint32_t imageLen = fb->len;
    uint32_t extraLen = head.length() + tail.length();
    uint32_t totalLen = imageLen + extraLen;
    client.println("POST " + serverPath + " HTTP/1.1");
    client.println("Host: " + serverName);
    client.println("Content-Length: " + String(totalLen));
    client.println("Content-Type: multipart/form-data; boundary=CircuitDigest");
    client.println("Authorization:" + apiKey);
    client.println();
    client.print(head);
    // Send image data in chunks
    uint8_t* fbBuf = fb->buf;
    size_t fbLen = fb->len;
    for (size_t n = 0; n < fbLen; n += 1024) {
      if (n + 1024 < fbLen) {
        client.write(fbBuf, 1024);
        fbBuf += 1024;
      } else {
        size_t remainder = fbLen % 1024;
        client.write(fbBuf, remainder);
      }
    }
    client.print(tail);
    // Clean up
    esp_camera_fb_return(fb);
    Serial.println("Waiting For Response!");
    // Wait for server response
    String response;
    long startTime = millis();
    while (client.connected() && millis() - startTime < 5000) { // Modifify the Waiting time as per the response time
      if (client.available()) {
        char c = client.read();
        response += c;
      }
    }
    // Extract and display NPR data from response
    String NPRData = extractJsonStringValue(response, "\"number_plate\"");
    uploadPlateToFirebase(NPRData);
    String imageLink = extractJsonStringValue(response, "\"view_image\"");
    Serial.print("NPR DATA: ");
    Serial.println(NPRData);
    Serial.print("ImageLink: ");
    Serial.println(imageLink);
    client.stop();
    esp_camera_fb_return(fb);
    return 0;
  } else {
    Serial.println("Connection to server failed");
    esp_camera_fb_return(fb);
    return -2;
  }
}
